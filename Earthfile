# Earthfile

ARG CONFIG="config.yaml"
ARG RHEL="false"

# Create the env file template
envfile:
  LOCALLY

  RUN printf '# Generated by earthly +envfile \n\
IB_USER=replace_me \n\
IB_PASS=replace_me \n\
RHEL_USER=replace_me \n\
RHEL_PASS=replace_me \n\
RHEL=false' > .env
  
clean-build:
  LOCALLY
  RUN rm -fr build

# Used to load the RHEL7 RPMS
rhel-rpms:
  FROM registry1.dso.mil/ironbank/redhat/ubi/ubi$RHEL
  WORKDIR /rpms

  RUN --secret RHEL_USER=+secrets/RHEL_USER --secret RHEL_PASS=+secrets/RHEL_PASS \
      subscription-manager register --auto-attach --username=$RHEL_USER --password=$RHEL_PASS
  
  RUN subscription-manager repos --enable=rhel-$RHEL-server-extras-rpms

  RUN yumdownloader --resolve --destdir=/rpms/ container-selinux

  # Download the K3S SELinux RPM 
  RUN curl -L "https://github.com/k3s-io/k3s-selinux/releases/download/v0.3.stable.0/k3s-selinux-0.3-0.el7.noarch.rpm" -o "/rpms/k3s-selinux.rpm"

  SAVE ARTIFACT /rpms

helm:
  FROM alpine/helm:3.5.3
  SAVE ARTIFACT /usr/bin/helm

yq:
  FROM  mikefarah/yq
  SAVE ARTIFACT /usr/bin/yq

get-big-bang:
  FROM registry1.dso.mil/ironbank/google/golang/golang-1.16
  WORKDIR /payload

  COPY +yq/yq /usr/bin
  COPY $CONFIG /tmp/config.yaml

  RUN BB_VERSION=$(yq e '.bigBang.version' /tmp/config.yaml) && \
      curl -fL https://umbrella-bigbang-releases.s3-us-gov-west-1.amazonaws.com/umbrella/$BB_VERSION/repositories.tar.gz -o "bb.tgz" && \
      tar -xzf bb.tgz repos

  # Quick hack to the repo remotes
  RUN for dir in repos/*/; do git -C $dir remote set-url origin http://bigbang:change_me@localhost/bigbang/$(git -C $dir remote get-url origin | grep -o '[^\/]*$') ; done

  SAVE ARTIFACT repos

charts:
  FROM registry1.dso.mil/ironbank/redhat/ubi/ubi8
  WORKDIR /src 

  COPY +yq/yq /usr/bin
  COPY +helm/helm /usr/bin
  COPY $CONFIG .

  RUN mkdir charts

  RUN yq e '.charts[] | .name + " " + .url' $CONFIG | \
      while read line ; do echo "repo add $line" | xargs -t helm; done

  RUN yq e '.charts[] | .name + "/" + .name + " -d ./charts --version " + .version' $CONFIG | \
      while read line ; do echo "pull $line" | xargs -t helm; done

  SAVE ARTIFACT /src/charts

k3s:
  FROM registry1.dso.mil/ironbank/redhat/ubi/ubi8
  WORKDIR /downloads

  COPY +yq/yq /usr/bin
  COPY $CONFIG /tmp/config.yaml

  RUN curl -fL "https://get.k3s.io" -o "init-k3s.sh"

  RUN K3S_VERSION=$(yq e '.k3s.version' /tmp/config.yaml) && \
      curl -fL "https://github.com/k3s-io/k3s/releases/download/$K3S_VERSION/{k3s,k3s-images.txt,sha256sum-amd64.txt}" -o "#1" && \
      sha256sum -c --ignore-missing "sha256sum-amd64.txt"

  SAVE ARTIFACT /downloads

images:
  FROM registry1.dso.mil/ironbank/google/golang/golang-1.16
  WORKDIR /payload

  COPY +yq/yq /usr/bin
  COPY $CONFIG .
  COPY +k3s/downloads/k3s-images.txt k3s-images.txt

  RUN go install github.com/google/go-containerregistry/cmd/crane@v0.5.1

  RUN --secret IB_USER=+secrets/IB_USER --secret IB_PASS=+secrets/IB_PASS \
      k3s_images=$(cat "k3s-images.txt" | tr "\n" " ") && \
      app_images=$(yq e '.images | join(" ")' $CONFIG) && \
      images="$app_images $k3s_images" && \
      echo "Cloning: $images" | tr " " "\n " && \
      crane auth login registry1.dso.mil -u $IB_USER -p $IB_PASS && \
      crane pull $images images.tar

  SAVE ARTIFACT /payload/images.tar

compress: 
  FROM registry1.dso.mil/ironbank/redhat/ubi/ubi8
  WORKDIR /payload

  RUN yum install -y zstd

  # Pull in artifacts from other build stages
  COPY +k3s/downloads bin
  COPY +charts/charts charts
  COPY +images/images.tar images/images.tar
  COPY +get-big-bang/repos repos

  # Optional include RHEL rpm build step
  IF [ $RHEL != "false" ]
    COPY +rhel-rpms/rpms rpms
  END

  # Quick housekeeping
  RUN rm -f bin/*.txt && mkdir -p rpms

  # Pull in local resources
  COPY payload/bin bin
  COPY payload/manifests manifests
  COPY payload/misc misc
  
  # Run any additional custom build stages
  BUILD ./payload+custom

  # Compress the tarball
  RUN tar -cv . | zstd -T0 -16 -f --long=25 - -o /export.tar.zst

  SAVE ARTIFACT /export.tar.zst
  
go-deps: 
  FROM registry1.dso.mil/ironbank/google/golang/golang-1.16
  WORKDIR /payload

  COPY src/go* .

  # Cache dep loading
  RUN go mod download

  # Cache the test suite too
  RUN go get gotest.tools/gotestsum 

go-test:
  FROM +go-deps 
  # Needed to prevent go test from choking
  ENV CGO_ENABLED 0

  # Add all src files
  COPY src .

  # Tests
  RUN gotestsum

build:
  FROM +go-test

  # Copy the final compressed tarball for shasum / export
  COPY +compress/export.tar.zst shift-pack.tar.zst

  # Compute a shasum of the pack tarball and inject at compile time
  RUN checksum=$(go run main.go checksum -f shift-pack.tar.zst) && \
      echo "Computed tarball checksum: $checksum" && \
      go build -o shift-pack -ldflags \
      "-X repo1.dso.mil/platform-one/big-bang/apps/product-tools/shift/cli/src/internal/utils.packageChecksum=$checksum" main.go

  # Validate the shasum before final packaging
  RUN ./shift-pack validate
  RUN ls -lah shift-pack*

  BUILD +clean-build
  SAVE ARTIFACT shift-pack* AS LOCAL ./build/
