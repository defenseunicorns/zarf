kind: ZarfInitConfig

components:
  - name: embedded-registry
    description: >
      The embedded registry component creates an OCI Distribution-compatible registry
      used internally exclusively by Zarf for serving OCI images to the K3s cluster
      Zarf creates or serving images to a cluster managed by Zarf to deploy the Gitops
      Service.  This registry is a single-process system service running outside of
      Kubernetes to bootstrap any images before the HA registry (Gitops Service) is
      available.
    required: true
    scripts:
      # Retry on error
      retry: true
      after:
        # Reload systemd with the new registry service
        - "systemctl daemon-reload"
        # Ensure the service is enabled and started immediately
        - "systemctl enable --now zarf-registry"
        # Wait for the registry to respond
        - "./zarf tools registry catalog $ZARF_APPLIANCE_ENDPOINT"
    files:
      # The registry-2 binary is built from https://github.com/defenseunicorns/distribution
      - source: https://zarf-public.s3-us-gov-west-1.amazonaws.com/registry-2
        shasum: 520ee67f4b91ba91b2a9c922fa40a5cd1301dc4b2955d3cd270b82c96f583455
        target: /usr/local/bin/zarf-registry
        executable: true
      # Create the systemd service definition
      - source: assets/scripts/registry.service
        target: /etc/systemd/system/zarf-registry.service
        symlinks:
          - /etc/systemd/system/multi-user.target.wants/zarf-registry.service
      # Create the registry config
      - source: assets/scripts/registry.conf
        target: /etc/zarf-registry.conf
      # Registry removal script
      - source: assets/scripts/zarf-clean-registry.sh
        target: /usr/local/bin/zarf-clean-registry.sh
        executable: true

  - name: k3s
    description: >
      Install K3s, certified Kubernetes distribution built for IoT & Edge computing.
      K3s provides the cluster need for Zarf running in Appliance MOde as well as can
      host a low-resource Gitops Service if not using an existing Kubernetes platform.
    required: true
    scripts:
      retry: true
      after:
        # Configure K3s systemd service
        - "systemctl daemon-reload"
        - "systemctl enable --now k3s"
        # Wait for the K3s node to come up
        - "/usr/local/bin/kubectl get nodes"
    files:
      # Include the actual K3s binary
      - source: https://github.com/k3s-io/k3s/releases/download/v1.21.6+k3s1/k3s
        shasum: 89eb5f3d12524d0a9d5b56ba3e2707b106e1731dd0e6d2e7b898ac585f4959df
        target: /usr/local/bin/k3s
        executable: true
        # K3s magic provides these tools when symlinking
        symlinks:
          - /usr/local/bin/kubectl
          - /usr/local/bin/ctr
          - /usr/local/bin/crictl
      # Transfer the K3s images for containerd to pick them up
      - source: https://github.com/k3s-io/k3s/releases/download/v1.21.6+k3s1/k3s-airgap-images-amd64.tar.zst
        shasum: 772ae839f8c7718e2022d103076df53452d4f09d2a22afdf4b5796cf0cbce62c
        target: /var/lib/rancher/k3s/agent/images/k3s.tar.zst
      # K3s removal script
      - source: assets/scripts/zarf-clean-k3s.sh
        target: /usr/local/bin/zarf-clean-k3s.sh
        executable: true
      # The K3s systemd service definition
      - source: assets/scripts/k3s.service
        target: /etc/systemd/system/k3s.service
        symlinks:
          - /etc/systemd/system/multi-user.target.wants/k3s.service
      # Mock file for creating the kube config symlink
      - source: assets/misc/empty-file
        target: /etc/rancher/k3s/k3s.yaml
        symlinks:
          - /root/.kube/config

  - name: traefik-ingress
    description: "Install the Traefik ingress (usually needed for appliance mode)"
    required: true
    appliance:
      manifests: assets/manifests/traefik
    scripts:
      retry: true
      before:
        # Wait for traefik to be fully loaded before loading it's config
        - "/usr/local/bin/kubectl get middleware"

  - name: management
    description: "Add the K9s terminal-based K8s UI for cluster management"
    default: true
    files:
      # The zarf binary is hosted on govcloud since the release on https://github.com/derailed/k9s/ is a tarball
      - source: https://zarf-public.s3-us-gov-west-1.amazonaws.com/k9s_Linux_x86_64_v0_24_11
        shasum: 18a5a33bbf58cb228e56a03380dcb6b9bb8624acab4ff63deb7364dc15d3c03f
        target: /usr/local/bin/k9s
        executable: true
      # Simple theme file to make K9s colors similar to Zarfs UI colors
      - source: assets/misc/k9s-theme.yaml
        target: /root/.k9s/skin.yml

  - name: logging
    description: "Add Promtail, Grafana and Loki (PGL) to this cluster for log monitoring."
    default: true
    appliance:
      manifests: assets/manifests/logging
      images:
        - grafana/loki:2.2.0
        - grafana/promtail:2.1.0
        - grafana/grafana:7.5.0
        - kiwigrid/k8s-sidecar:0.1.209
      charts:
        - name: loki-stack
          url: https://grafana.github.io/helm-charts
          version: 2.4.1
          namespace: logging
          valuesFile: assets/charts/pgl-values.yaml

  - name: gitops-service
    description: "Add Registry and Gitea for serving gitops-based clusters in an airgap"
    scripts:
      retry: true
      after:
        # Wait for the K3s node to come up
        - "./zarf tools registry catalog $ZARF_GITOPS_ENDPOINT"
    appliance:
      manifests: assets/manifests/gitops
      images:
        - registry1.dso.mil/ironbank/opensource/docker/registry-v2:2.7.1
        - gitea/gitea:1.13.7
      charts:
        - name: docker-registry
          url: https://helm.twun.io
          version: 1.10.1
          namespace: registry
          valuesFile: assets/charts/registry-values.yaml
        - name: gitea
          url: https://dl.gitea.io/charts
          version: 2.2.5
          namespace: git
          valuesFile: assets/charts/gitea-values.yaml
