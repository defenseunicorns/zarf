name: Build Rust Binary

env:
  zarfInjectorPath: 'src/injector/stage1/target/x86_64-unknown-linux-musl/release/zarf-injector'

on:
  workflow_dispatch:
    inputs:
      versionTag:
        description: "Version tag"
        required: true
      branchName:
        description: "Branch to build the injector from"
        required: false
        default: 'master'

jobs:
  build-injector:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repo"
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branchName }}

      - name: "Install cosign"
        uses: sigstore/cosign-installer@v2.5.0

      - name: "Install Rust And Build"
        uses: gmiam/rust-musl-action@v1.1.1
        with:
          args: cargo build --target x86_64-unknown-linux-musl --release --manifest-path src/injector/stage1/Cargo.toml

      - name: "Strip The Binary Down"
        run: sudo strip ${{ env.zarfInjectorPath }}

      - name: "Upload Rust Binary"
        uses: actions/upload-artifact@v3
        with:
          name: zarf-injector
          path: ${{ env.zarfInjectorPath }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Upload Binary To DockerHub"
        run: cosign upload blob -f ${{ env.zarfInjectorPath }} defenseunicorns/zarf-injector:${{ github.event.inputs.versionTag }}

      - name: "Sign the binary"
        run: cosign sign --key awskms:///${{ secrets.COSIGN_AWS_KMS_KEY }} -a release-engineer=https://github.com/${{ github.actor }} -a version=${{ github.event.inputs.versionTag }} defenseunicorns/zarf-injector:${{ github.event.inputs.versionTag }}
        env:
          COSIGN_EXPERIMENTAL: 1
          AWS_REGION: ${{ secrets.COSIGN_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.COSIGN_AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.COSIGN_AWS_ACCESS_KEY }}

