name: Build and Publish Zarf Agent Image

on:
  workflow_dispatch:
    inputs:
      versionTag:
        description: "Version tag"
        required: true
      branchName:
        description: "Branch to build the agent from"
        required: false
        default: "master"

jobs:
<<<<<<< HEAD
  build-agent:
    runs-on: ubuntu-latest
    steps:
      - name: "Install GoLang"
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.x

=======
  build-injector:
    runs-on: ubuntu-latest
    steps:
>>>>>>> master
      - name: "Checkout Repo"
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branchName }}
<<<<<<< HEAD
      
      - name: "Setup caching"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
=======
>>>>>>> master

      - name: "Install cosign"
        uses: sigstore/cosign-installer@v2.1.0

<<<<<<< HEAD
      - name: "Set up Docker Buildx"
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: "Login to Docker Hub"
=======
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
>>>>>>> master
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

<<<<<<< HEAD
      - name: "Build zarf binaries"
        run: make build-cli-linux

      - name: "Rename binaries for packaging"
        run: mv build/zarf build/zarf-linux-amd64 && mv build/zarf-arm build/zarf-linux-arm64

      - name: "Build and Publish the Image"
        run: docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag defenseunicorns/zarf-agent:${{ github.event.inputs.versionTag }} .
=======
      - name: "Build and Publish the Image"
        run: buildx build --push --platform linux/arm64/v8,linux/amd64 --tag defenseunicorns/zarf-agent:${{ github.event.inputs.versionTag }} .
>>>>>>> master

      - name: "Sign the Image"
        run: cosign sign --key awskms:///${{ secrets.COSIGN_AWS_KMS_KEY }} -a release-engineer=https://github.com/${{ github.actor }} -a version=${{ github.event.inputs.versionTag }} defenseunicorns/zarf-agent:${{ github.event.inputs.versionTag }}
        env:
          COSIGN_EXPERIMENTAL: 1
          AWS_REGION: ${{ secrets.COSIGN_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.COSIGN_AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.COSIGN_AWS_ACCESS_KEY }}
