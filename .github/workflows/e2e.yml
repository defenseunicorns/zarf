name: e2e
on:
  pull_request:
    paths-ignore:
      - "**.md"
      - "**.jpg"
      - "**.png"
      - "**.gif"
      - "**.svg"
      - "adr/**"
      - "docs/**"
      - "package.json"
      - "package-lock.json"

# Abort prior jobs in the same workflow / PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/golang

      - name: "Build CLI"
        run: make build-cli-linux-amd

      - name: "Zarf Agent: Login to Docker Hub"
        uses: docker/login-action@v2
        with:
          username: zarfdev
          password: ${{ secrets.ZARF_DEV_DOCKERHUB }}

      - name: "Zarf Agent: Build and Publish the Image"
        run: |
          cp build/zarf build/zarf-linux-amd64
          docker buildx build --push --platform linux/amd64 --tag zarfdev/agent:$GITHUB_SHA .

      - name: "Make Packages"
        run: make init-package build-examples ARCH=amd64 AGENT_IMAGE=zarfdev/agent:$GITHUB_SHA

      - uses: ./.github/actions/build-cache

  test-k3d:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/golang
      - uses: ./.github/actions/build-cache
      - uses: ./.github/actions/k3d

      - name: "Run Tests"
        run: |
          make test-e2e ARCH=amd64
          make destroy

      - uses: ./.github/actions/logs

  test-k3s:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/golang
      - uses: ./.github/actions/build-cache

      - name: "Run Tests"
        # NOTE: "PATH=$PATH" preserves the default user $PATH. This is needed to maintain the version of go installed
        #       in a previous step. This test run will use Zarf to create a K3s cluster, and a brand new cluster will be
        #       used for each test
        # chown the logs since they were orignally created as root
        run: |
          sudo env "PATH=$PATH" CI=true APPLIANCE_MODE=true make test-e2e ARCH=amd64
          sudo chown $USER /tmp/zarf-*.log
          sudo make destroy

      - uses: ./.github/actions/logs

  test-kind:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/golang
      - uses: ./.github/actions/build-cache

      - name: "Dependency: Kind Cluster Init"
        run: |
          kind delete cluster && kind create cluster
          kubectl scale deploy -n kube-system coredns --replicas=1

      - name: "Run Tests"
        run: |
          make test-e2e ARCH=amd64
          make destroy

      - uses: ./.github/actions/logs

  test-web-ui:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/golang
      - uses: ./.github/actions/build-cache
      - uses: ./.github/actions/k3d

      - name: Cache browsers
        uses: actions/cache@v3
        with:
          path: "~/Library/Caches/ms-playwright/"
          key: ${{ runner.os }}-browsers

      - name: "Run Tests"
        run: npm test

      - uses: ./.github/actions/logs

      - name: "Save ui test reports"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  test-external:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/golang
      - uses: ./.github/actions/build-cache
      - uses: ./.github/actions/k3d

      - name: "Run Tests"
        run: |
          make test-external ARCH=amd64
          make destroy

      - uses: ./.github/actions/logs

  test-windows:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Use GNU tar for Windows
        shell: cmd
        run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - uses: actions/checkout@v3
      - uses: ./.github/actions/golang
      - uses: ./.github/actions/build-cache

      - name: "Build CLI"
        run: make build-cli-windows-amd

      - name: "Run Tests"
        shell: pwsh
        run: make test-e2e ARCH=amd64 -e SKIP_K8S=true
