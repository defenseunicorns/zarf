//go:build !alt_language

// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2021-Present The Zarf Authors

// Package lang contains the language strings for english used by Zarf
// Alternative languages can be created by duplicating this file and changing the build tag to "//go:build alt_language && <language>"
package lang

import "errors"

// All language strings should be in the form of a constant
// The constants should be grouped by the top level package they are used in (or common)
// The format should be <PathName><Err/Info><ShortDescription>
// Debug messages will not be a part of the language strings since they are not intended to be user facing
// Include sprintf formatting directives in the string if needed
const (
	ErrNoClusterConnection = "Failed to connect to the Kubernetes cluster."
	ErrTunnelFailed        = "Failed to create a tunnel to the Kubernetes cluster."
	ErrLoadState           = "Failed to load the Zarf State from the Kubernetes cluster."
	ErrUnmarshal           = "failed to unmarshal file: %w"
	ErrMarshal             = "failed to marshal file: %w"
)

// Zarf CLI commands
const (
	// zarf connect
	CmdConnect      = "connect {REGISTRY|LOGGING|GIT|connect-name}"
	CmdConnectShort = "Access services or pods deployed in the cluster."
	CmdConnectLong  = "Uses a k8s port-forward to connect to resources within the cluster referenced by your kube-context.\n" +
		"Three default options for this command are <REGISTRY|LOGGING|GIT>. These will connect to the Zarf created resources " +
		"(assuming they were selected when performing the `zarf init` command).\n\n" +
		"Packages can provide service manifests that define their own shortcut connection options. These options will be " +
		"printed to the terminal when the package finishes deploying.\n If you don't remember what connection shortcuts your deployed " +
		"package offers, you can search your cluster for services that have the 'zarf.dev/connect-name' label. The value of that label is " +
		"the name you will pass into the 'zarf connect' command. \n\n" +
		"Even if the packages you deploy don't define their own shortcut connection options, you can use the command flags " +
		"to connect into specific resources. You can read the command flag descriptions below to get a better idea how to connect " +
		"to whatever resource you are trying to connect to."

	// zarf connect list
	CmdConnectList      = "list"
	CmdConnectListShort = "List all available connection shortcuts."

	CmdConnectFlagName           = "name"
	CmdConnectFlagNameHelp       = "Specify the resource name.  E.g. name=unicorns or name=unicorn-pod-7448499f4d-b5bk6"
	CmdConnectFlagNamespace      = "namespace"
	CmdConnectFlagNamespaceHelp  = "Specify the namespace.  E.g. namespace=default"
	CmdConnectFlagType           = "type"
	CmdConnectFlagTypeHelp       = "Specify the resource type.  E.g. type=svc or type=pod"
	CmdConnectFlagLocalPort      = "local-port"
	CmdConnectFlagLocalPortHelp  = "(Optional, autogenerated if not provided) Specify the local port to bind to.  E.g. local-port=42000"
	CmdConnectFlagRemotePort     = "remote-port"
	CmdConnectFlagRemotePortHelp = "Specify the remote port of the resource to bind to.  E.g. remote-port=8080"
	CmdConnectFlagCliOnly        = "cli-only"
	CmdConnectFlagCliOnlyHelp    = "Disable browser auto-open"

	// zarf destroy
	CmdDestroy      = "destroy"
	CmdDestroyShort = "Tear it all down, we'll miss you Zarf..."
	CmdDestroyLong  = "Tear down Zarf.\n\n" +
		"Deletes everything in the 'zarf' namespace within your connected k8s cluster.\n\n" +
		"If Zarf deployed your k8s cluster, this command will also tear your cluster down by " +
		"searching through /opt/zarf for any scripts that start with 'zarf-clean-' and executing them. " +
		"Since this is a cleanup operation, Zarf will not stop the teardown if one of the scripts produce " +
		"an error.\n\n" +
		"If Zarf did not deploy your k8s cluster, this command will delete the Zarf namespace, delete secrets " +
		"and labels that only Zarf cares about, and optionally uninstall components that Zarf deployed onto " +
		"the cluster. Since this is a cleanup operation, Zarf will not stop the uninstalls if one of the " +
		"resources produce an error while being deleted."

	CmdDestroyFlagConfirm              = "confirm"
	CmdDestroyFlagConfirmHelp          = "REQUIRED. Confirm the destroy action to prevent accidental deletions"
	CmdDestroyFlagRemoveComponents     = "remove-components"
	CmdDestroyFlagRemoveComponentsHelp = "Also remove any installed components outside the zarf namespace"

	CmdDestroyErrNoScriptPath           = "Unable to find the folder (%s) which has the scripts to cleanup the cluster. Please double-check you have the right kube-context"
	CmdDestroyErrScriptPermissionDenied = "Received 'permission denied' when trying to execute the script (%s). Please double-check you have the correct kube-context."
)

// Zarf Agent messages
// These are only seen in the Kubernetes logs
const (
	AgentInfoWebhookAllowed = "Webhook [%s - %s] - Allowed: %t"
	AgentInfoShutdown       = "Shutdown gracefully..."
	AgentInfoPort           = "Server running in port: %s"

	AgentErrStart                  = "Failed to start the web server"
	AgentErrShutdown               = "unable to properly shutdown the web server"
	AgentErrNilReq                 = "malformed admission review: request is nil"
	AgentErrMarshalResponse        = "unable to marshal the response"
	AgentErrMarshallJSONPatch      = "unable to marshall the json patch"
	AgentErrInvalidType            = "only content type 'application/json' is supported"
	AgentErrInvalidOp              = "invalid operation: %s"
	AgentErrInvalidMethod          = "invalid method only POST requests are allowed"
	AgentErrImageSwap              = "Unable to swap the host for (%s)"
	AgentErrHostnameMatch          = "failed to complete hostname matching: %w"
	AgentErrGetState               = "failed to load zarf state from file: %w"
	AgentErrCouldNotDeserializeReq = "could not deserialize request: %s"
	AgentErrBindHandler            = "Unable to bind the webhook handler"
	AgentErrBadRequest             = "could not read request body: %s"
)

// Zarf Init Errors
var ErrInitNotFound = errors.New("this command requires a zarf-init package, but one was not found on the local system. Re-run the last command again without '--confirm' to download the package")
