#!/usr/bin/expect -f

# Assumptions:
# - run as root (required to run zarf)
# - invocation working dir is <root>/build (where zarf binary is)

# Refs:
# - https://linux.die.net/man/1/expect
# - https://www.tcl.tk/man/tcl8.6/TclCmd/contents.html


# variables / config
set env(PATH) "$::env(PATH):[file normalize .]" ; # add zarf to path
set gamedir "[file normalize ../examples/game]"
set rcfile "/tmp/asciinema-rcfile"
set title [
  file tail [ file rootname [lindex $argv0] ]
]
set recording [lindex $argv 0]
set log [lindex $argv 1]
log_file $log
set send_human {.1 .2 10 .05 1}   ; # "human-like" typing speeds on 'send -h'
set env(PS1) {\[\033[01;32m\]root@host\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]# } ; # custom terminal input prompt
#match_max 25000
#set expect_out(buffer) {}
#set down_key "\033\[B"


# proc defs
proc wait_input { {timeout 10} } {
  expect -timeout $timeout -re ".*root@host.*:.*# $"
}

proc input_wait { {seconds 1} } {
  wait_input ; sleep $seconds
}

proc comment { {text " "} } {
  send "# --> " ; send -h "$text \n\n" ;  input_wait 1
}

proc do { {cmd "\n"} } {
  send -h "$cmd" ; sleep 1 ; send "\n\n" ; input_wait 2
}

proc clean {} {
  global gamedir
  global rcfile

  spawn bash --norc
  send "rm -f $gamedir/*.tar.zst $rcfile\n"
  send "zarf destroy --confirm\n"
  send "exit\n"
  expect eof
}

proc setup {} {
  global rcfile

  spawn bash --norc
  send "echo 'alias ls=\"ls --color=auto\"' > $rcfile\n" ; expect *
  send "echo 'alias grep=\"grep --color=auto\"' >> $rcfile\n" ; expect *
  send "echo 'export PS1=\"$::env(PS1)\"' >> $rcfile\n" ; expect *
  send "echo 'export GREP_COLOR=\"01;97;100\"' >> $rcfile\n" ; expect *
  send "exit\n"
  expect eof
}


# filesystem to ready state
clean
setup


# start recording & wait for input prompt
spawn asciinema rec \
  --command "/bin/bash --rcfile $rcfile" \
  --title "$title" \
  --idle-time-limit 3 \
  --overwrite \
  $recording
expect -re {asciinema: .* done} ; wait_input

comment "elevated permissions?"
do "whoami"

comment "project cloned?"
do "git remote -v"

comment "release downloaded?"
do "ls -l . | grep -e '^' -e 'zarf$' -e 'zarf-init.*$'"

comment "auth to Iron Bank?"
do "cat ~/.docker/config.json | sed 's/\"auth\".*/\"auth\": \"\[...]\"/'"

comment "zarf binary on path?"
do "which zarf"

comment "create cluster"
send -h "zarf init \\\n"
send -h "  --host=127.0.0.1 \\\n"
send -h "  --components=management \\\n"
send -h "  --confirm"
sleep 1 ; send "\n\n" ; wait_input 120

comment "cluster running?"
do "kubectl cluster-info"

comment "move to game folder"
do "cd $gamedir ; ls -l"

comment "package game"
send -h "zarf package create --confirm"
sleep 1 ; send "\n\n" ; wait_input 120

comment "voilÃ , game package!"
do "ls -l . | grep -e '^' -e 'zarf-.*.tar.zst'"

comment "wait for cluster ready"
send -h "curl \\\n"
send -h "  --connect-timeout 2 \\\n"
send -h "  --max-time 5 \\\n"
send -h "  --retry 30 \\\n"
send -h "  --retry-delay 1 \\\n"
send -h "  --retry-max-time 60 \\\n"
send -h "  --retry-connrefused \\\n"
send -h "  --silent --fail \\\n"
send -h "  https://localhost/v2/ > /dev/null"
sleep 1 ; send "\n\n" ; wait_input 120

comment "deploy package"
send -h "zarf package deploy \\\n"
send -h "zarf-"
send -h "\t"
send -h "\\\n"
send -h -- "--confirm"
sleep 1 ; send "\n\n" ; wait_input 120

comment "it begins!"
comment "(...in HTML cuz terminal won't picture!)"
do "curl --location https://localhost"

comment "and finally, to cleanup"
send -h "zarf destroy --confirm"
sleep 1 ; send "\n\n" ; wait_input 120

comment "its gone!"
do "kubectl cluster-info"

comment "success!"
do "exit"
