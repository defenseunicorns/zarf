
# For a description of the syntax of this configuration file,
# see docs/Kconfig-language.txt.
#

mainmenu "Configuration"

config HAVE_DOT_CONFIG
        bool
        default y

menu "Settings"

config DESKTOP
        bool "Enable compatibility for full-blown desktop systems (8kb)"
        default y
        help
        Enable applet options and features which are not essential.
        Many applet options have dedicated config options to (de)select them
        under that applet; this options enables those options which have no
        individual config item for them.

        Select this if you plan to use busybox on full-blown desktop machine
        with common Linux distro, which needs higher level of command-line
        compatibility.

        If you are preparing your build to be used on an embedded box
        where you have tighter control over the entire set of userspace
        tools, you can unselect this option for smaller code size.

config EXTRA_COMPAT
        bool "Provide compatible behavior for rare corner cases (bigger code)"
        default n
        help
        This option makes grep, sed etc handle rare corner cases
        (embedded NUL bytes and such). This makes code bigger and uses
        some GNU extensions in libc. You probably only need this option
        if you plan to run busybox on desktop.

config FEDORA_COMPAT
        bool "Building for Fedora distribution"
        default n
        help
        This option makes some tools behave like they do on Fedora.

        At the time of this writing (2017-08) this only affects uname:
        normally, uname -p (processor) and uname -i (platform)
        are shown as "unknown", but with this option uname -p
        shows the same string as uname -m (machine type),
        and so does uname -i unless machine type is i486/i586/i686 -
        then uname -i shows "i386".

config INCLUDE_SUSv2
        bool "Enable obsolete features removed before SUSv3"
        default y
        help
        This option will enable backwards compatibility with SuSv2,
        specifically, old-style numeric options ('command -1 <file>')
        will be supported in head, tail, and fold. (Note: should
        affect renice too.)

        devpts mounted.

config FEATURE_UTMP
        bool "Support utmp file"
        default y
        help
        The file /var/run/utmp is used to track who is currently logged in.
        With this option on, certain applets (getty, login, telnetd etc)
        will create and delete entries there.
        "who" applet requires this option.

config FEATURE_WTMP
        bool "Support wtmp file"
        default y
        depends on FEATURE_UTMP
        help
        The file /var/run/wtmp is used to track when users have logged into
        and logged out of the system.
        With this option on, certain applets (getty, login, telnetd etc)
        will append new entries there.
        "last" applet requires this option.

config FEATURE_PIDFILE
        bool "Support writing pidfiles"
        default y
        help
        This option makes some applets (e.g. crond, syslogd, inetd) write
        a pidfile at the configured PID_FILE_PATH.  It has no effect
        on applets which require pidfiles to run.

config PID_FILE_PATH
        string "Directory for pidfiles"
        default "/var/run"
        depends on FEATURE_PIDFILE || FEATURE_CROND_SPECIAL_TIMES
        help
        This is the default path where pidfiles are created.  Applets which
        allow you to set the pidfile path on the command line will override
        this value.  The option has no effect on applets that require you to
        specify a pidfile path.  When crond has the 'Support special times'
        option enabled, the 'crond.reboot' file is also stored here.

config BUSYBOX
        bool "Include busybox applet"
        default y
        help
        The busybox applet provides general help message and allows
        the included applets to be listed.  It also provides
        optional --install command to create applet links. If you unselect
        this option, running busybox without any arguments will give
        just a cryptic error message:

        $ busybox
        busybox: applet not found

        Running "busybox APPLET [ARGS...]" will still work, of course.

config FEATURE_SHOW_SCRIPT
        bool "Support --show SCRIPT"
        default y
        depends o
        depends on FEATURE_SUID
        help
        Allow the SUID/SGID state of an applet to be determined at runtime
        by checking /etc/busybox.conf. (This is sort of a poor man's sudo.)
        The format of this file is as follows:

        APPLET = [Ssx-][Ssx-][x-] [USER.GROUP]

        s: USER or GROUP is allowed to execute APPLET.
           APPLET will run under USER or GROUP
           (regardless of who's running it).
        S: USER or GROUP is NOT allowed to execute APPLET.
           APPLET will run under USER or GROUP.
           This option is not very sensical.
        x: USER/GROUP/others are allowed to execute APPLET.
           No UID/GID change will be done when it is run.
        -: USER/GROUP/others are not allowed to execute APPLET.

        An example might help:

        |[SUID]
        |su = ssx root.0 # applet su can be run by anyone and runs with
        |                # euid=0,egid=0
        |su = ssx        # exactly the same
        |
        |mount = sx- root.disk # applet mount can be run by root and members
        |                      # of group disk (but not anyone else)
        |                      # and runs with euid=0 (egid is not changed)
        |
        |cp = --- # disable applet cp for everyone

        The file has to be owned by user root, group root and has to be
        writeable only by root:
                (chown 0.0 /etc/busybox.conf; chmod 600 /etc/busybox.conf)
        The busybox executable has to be owned by user root, group
        root and has to be setuid root for this to work:
                (chown 0.0 /bin/busybox; chmod 4755 /bin/busybox)

        Robert 'sandman' Griebl has more information here:
        <url: http://www.softforge.de/bb/suid.html >.

config FEATURE_SUID_CONFIG_QUIET
        bool "Suppress warning message if /etc/busybox.conf is not readable"
        default y
        depends on FEATURE_SUID_CONFIG
        help
        /etc/busybox.conf should be readable by the user needing the SUID,
        check this option to avoid users to be notified about missing
        permissions.

config FEATURE_PREFER_APPLETS
        bool "exec prefers applets"
        default n
        help
        This is an experimental option which directs applets about to
        call 'exec' to try and find an applicable busybox applet before
        searching the PATH. This is typically done by exec'ing
        /proc/self/exe.

        This may a
        bool #No description makes it a hidden option
        default n
        #help
        #This option is auto-selected when you select any applet which may
        #send its output to syslog. You do not need to select it manually.

comment 'Build Options'

config STATIC
        bool "Build static binary (no shared libs)"
        default n
        help
        If you want to build a static binary, which does not use
        or require any shared libraries, enable this option.
        Static binaries are larger, but do not require functioning
        dynamic libraries to be present, which is important if used
        as a system rescue tool.

config PIE
        bool "Build position independent executable"
        default n
        depends on !STATIC
        help
        Hardened code option. PIE binaries are loaded at a different
        address at each invocation. This has some overhead,
        particularly on x86-32 which is short on registers.

        Most people will leave this set to 'N'.

config NOMMU
        bool "Force NOMMU build"
        default n
        help
        Busybox tries to detect whether architecture it is being
        built against supports MMU or not. If this detection fails,
        or if you want to build NOMMU version of busybox for testing,
        you may force NOMMU build here.

        Most people will leave this set to 'N'.

# PIE can be made to work with BUILD_LIBBUSYBOX, but currently
# build system does not support that
config BUILD_LIBBUSYBOX
        bool "Build shared libbusybox"
        default n
        depends on !FEATURE_PREFER_APPLETS && !PIE && !STATIC
        help
        Build a shared library libbusybox.so.N.N.N which contains all
        busybox code.

        This feature allows every applet to be built as a really tiny
        separate executable linked against the library:
        |$ size 0_lib/l*
        |    text  data   bss     dec    hex filename
        |     939   212    28    1179    49b 0_lib/last
        |     939   212    28    1179    49b 0_lib/less
        |  919138  8328  1556  929022  e2cfe 0_lib/libbusybox.so.1.N.M

        This is useful on NOMMU systems which are not capable

        will be found.

        For example, busybox can be built against an installed
        Android NDK, platform version 9, for ARM ABI with

        CONFIG_SYSROOT=/opt/android-ndk/platforms/android-9/arch-arm

        Native builds leave this empty.

config EXTRA_CFLAGS
        string "Additional CFLAGS"
        default ""
        help
        Additional CFLAGS to pass to the compiler verbatim.

config EXTRA_LDFLAGS
        string "Additional LDFLAGS"
        default ""
        help
        Additional LDFLAGS to pass to the linker verbatim.

config EXTRA_LDLIBS
        string "Additional LDLIBS"
        default ""
        help
        Additional LDLIBS to pass to the linker with -l.

config USE_PORTABLE_CODE
        bool "Avoid using GCC-specific code constructs"
        default n
        help
        Use this option if you are trying to compile busybox with
        compiler other than gcc.
        If you do use gcc, this option may needlessly increase code size.

config STACK_OPTIMIZATION_386
        bool "Use -mpreferred-stack-boundary=2 on i386 arch"
        default y
        help
        This option makes for smaller code, but some libc versions
        do not work with it (they use SSE instructions without
        ensuring stack alignment).

config STATIC_LIBGCC
        bool "Use -static-libgcc"
        default y
        help
        This option instructs gcc to link in a static version of its
        support library, libgcc. This means that the binary will require
        one fewer dynamic library at run time.

comment 'Installation Options ("make install" behavior)'

choice
        prompt "What kind of applet links to install"
        default INSTALL_APPLET_SYMLINKS
        help
        Choose what kind of links to applets are created by "make install".

config INSTALL_APPLET_SYMLINK
        stepping through it with a debugger. This switches it off, resulting
        in a much bigger executable that more closely matches the source
        code.

        This replaces -Os/-O2 with -O0 in gcc command line.

config DEBUG_SANITIZE
        bool "Enable runtime sanitizers (ASAN/LSAN/USAN/etc...)"
        default n
        help
        Say Y here if you want to enable runtime sanitizers. These help
        catch bad memory accesses (e.g. buffer overflows), but will make
        the executable larger and slow down runtime a bit.

        This adds -fsanitize=foo options to gcc command line.

        If you aren't developing/testing busybox, say N here.

config UNIT_TEST
        bool "Build unit tests"
        default n
        help
        Say Y here if you want to build unit tests (both the framework and
        test cases) as an applet. This results in bigger code, so you
        probably don't want this option in production builds.

config WERROR
        bool "Abort compilation on any warning"
        default n
        help
        This adds -Werror to gcc command line.

        Most people should answer N.

config WARN_SIMPLE_MSG
        bool "Warn about single parameter bb_xx_msg calls"
        default n
        help
        This will cause warnings to be shown for any instances of
        bb_error_msg(), bb_error_msg_and_die(), bb_perror_msg(),
        bb_perror_msg_and_die(), bb_herror_msg() or bb_herror_msg_and_die()
        being called with a single parameter. In these cases the equivalent
        bb_simple_xx_msg function should be used instead.
        Note that use of STRERROR_FMT may give false positives.

        If you aren't developing busybox, say N here.

choice
        prompt "Additional debugging library"
        default NO_DEBUG_LIB
        help
        Using an additional debugging library will make busybox become
        considerably larger and will cause it to run more slowly. You
        should always leave this option disabled for production use.

        dmalloc support:
        ----------------
        This enables compiling with dmalloc ( http://dmalloc.com/ )
        which is an excellent public domain mem leak and malloc problem
        detector. To enable dmalloc, before running busybox you will
        want to properly set your environment, for example:
                export DMALLOC_OPTIONS=debug=0x34f47d83,inter=100,log=logfile
        The 'debug=' value is generated using the following command
        dmalloc -p log-stats -p log-non-free -p log-bad-space \
                -p log-elapsed-time -p check-fence -p check-heap \
                -p check-lists -p check-blank -p check-funcs -p realloc-copy \
                -p allow-free-null

        Electric-fence support:
        -----------------------
        This enables compiling with Electric-fence support. Electric
        fence is another very useful malloc debugging library which uses
        your computer's virtual memory hardware to detect illegal memory
        accesses. This support will make busybox be considerably larger
        and run slower, so you should leave this option disabled unless
        you are hunting a hard to find memory problem.


config NO_DEBUG_LIB
        bool "None"

config DMALLOC
        bool "Dmalloc"

config EFENCE
        bool "Electric-fence"

endchoice

source libbb/Config.in

endmenu

comment "Applets"

source archival/Config.in
source coreutils/Config.in
source console-tools/Config.in
source debianutils/Config.in
source klibc-utils/Config.in
source editors/Config.in
source findutils/Config.in
source init/Config.in
source loginutils/Config.in
source e2fsprogs/Config.in
source modutils/Config.in
source util-linux/Config.in
source miscutils/Config.in
source networking/Config.in
source printutils/Config.in
source mailutils/Config.in
source procps/Config.in
source runit/Config.in
source selinux/Config.in
source shell/Config.in
source sysklogd/Config.in